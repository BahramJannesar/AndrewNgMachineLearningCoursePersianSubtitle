WEBVTT

1
00:00:00.180 --> 00:00:01.178
In this video, I'd like to

2
00:00:01.178 --> 00:00:02.587
tell you how to write

3
00:00:02.600 --> 00:00:03.842
control statements for your

4
00:00:03.842 --> 00:00:05.672
Octave programs, so things

5
00:00:05.700 --> 00:00:07.280
like "for", "while" and "if" statements

6
00:00:07.350 --> 00:00:12.176
and also how to define and use functions.

7
00:00:12.480 --> 00:00:13.980
Here's my Octave window. Let

8
00:00:13.980 --> 00:00:16.502
me first show you how to use a "for" loop.

9
00:00:16.502 --> 00:00:17.888
I'm going to start by setting v

10
00:00:17.888 --> 00:00:18.852
to be a 10 by

11
00:00:18.870 --> 00:00:20.808
1 vector 0.

12
00:00:20.830 --> 00:00:22.209
Now, here's I write

13
00:00:22.240 --> 00:00:25.071
a "for" loop for I equals 1 to 10.

14
00:00:25.090 --> 00:00:27.608
That's for I equals Y colon 10.

15
00:00:27.608 --> 00:00:29.905
And let's see, I'm

16
00:00:29.905 --> 00:00:31.466
going to set V of I

17
00:00:31.466 --> 00:00:33.214
equals two to the

18
00:00:33.220 --> 00:00:36.848
power of I, and finally

19
00:00:36.848 --> 00:00:37.671
end.

20
00:00:37.671 --> 00:00:39.082
The white space does not matter,

21
00:00:39.090 --> 00:00:40.538
so I am putting the spaces

22
00:00:40.538 --> 00:00:41.960
just to make it look nicely indented,

23
00:00:41.990 --> 00:00:44.385
but you know spacing doesn't matter.

24
00:00:44.420 --> 00:00:46.163
But if I do this, then the

25
00:00:46.163 --> 00:00:48.626
result is that V gets

26
00:00:48.626 --> 00:00:49.420
set to, you know, two to

27
00:00:49.500 --> 00:00:51.478
the power one, two to the power two, and so on.

28
00:00:51.490 --> 00:00:52.665
So this is syntax for I

29
00:00:52.665 --> 00:00:55.410
equals one colon 10 that

30
00:00:55.410 --> 00:00:57.429
makes I loop through the

31
00:00:57.440 --> 00:00:59.662
values one through 10.

32
00:00:59.662 --> 00:01:00.830
And by the way, you can also do

33
00:01:00.830 --> 00:01:02.481
this by setting your

34
00:01:02.481 --> 00:01:04.795
indices equals one to

35
00:01:04.800 --> 00:01:07.260
10, and so the

36
00:01:07.270 --> 00:01:09.305
indices in the array from one to 10.

37
00:01:09.305 --> 00:01:13.249
You can also write for I equals indices.

38
00:01:15.040 --> 00:01:17.805
And this is actually the same as if I equals one to 10.

39
00:01:17.820 --> 00:01:19.459
You can do, you know, display

40
00:01:19.480 --> 00:01:23.498
I and this would do the same thing.

41
00:01:23.498 --> 00:01:24.698
So, that is a "for" loop,

42
00:01:24.698 --> 00:01:27.201
if you are familiar with "break"

43
00:01:27.230 --> 00:01:29.375
and "continue", there's "break" and

44
00:01:29.375 --> 00:01:30.809
"continue" statements, you can

45
00:01:30.809 --> 00:01:32.061
also use those inside loops

46
00:01:32.061 --> 00:01:33.902
in octave, but first

47
00:01:33.902 --> 00:01:36.550
let me show you how a while loop works.

48
00:01:36.570 --> 00:01:39.088
So, here's my vector

49
00:01:39.120 --> 00:01:40.912
V. Let's write the while loop.

50
00:01:40.920 --> 00:01:44.037
I equals 1, while I

51
00:01:44.037 --> 00:01:45.259
is less than or equal to

52
00:01:45.259 --> 00:01:47.662
5, let's set

53
00:01:47.662 --> 00:01:51.082
V I equals one hundred

54
00:01:51.530 --> 00:01:54.449
and increment I by

55
00:01:54.449 --> 00:01:56.644
one, end.

56
00:01:56.700 --> 00:01:58.090
So this says what?

57
00:01:58.090 --> 00:01:59.932
I starts off equal to

58
00:01:59.970 --> 00:02:01.359
one and then I'm going

59
00:02:01.380 --> 00:02:02.629
to set V I equals one

60
00:02:02.629 --> 00:02:04.249
hundred and increment I by

61
00:02:04.260 --> 00:02:07.666
one until I is, you know, greater than five.

62
00:02:07.690 --> 00:02:09.377
And as a result of that,

63
00:02:09.377 --> 00:02:13.022
whereas previously V was this powers of two vector.

64
00:02:13.022 --> 00:02:14.573
I've now taken the first

65
00:02:14.580 --> 00:02:17.225
five elements of my vector

66
00:02:17.260 --> 00:02:19.618
and overwritten them with this value one hundred.

67
00:02:19.618 --> 00:02:22.797
So that's a syntax for a while loop.

68
00:02:23.140 --> 00:02:24.503
Let's do another example.

69
00:02:24.503 --> 00:02:26.600
Y equals one while

70
00:02:26.600 --> 00:02:28.491
true and here

71
00:02:28.500 --> 00:02:31.892
I wanted to show you how to use a break statement.

72
00:02:31.892 --> 00:02:34.040
Let's say V I equals 999

73
00:02:34.070 --> 00:02:37.331
and I equals i+1

74
00:02:38.110 --> 00:02:45.900
if i equals 6 break and

75
00:02:47.910 --> 00:02:47.910
end.

76
00:02:48.410 --> 00:02:49.425
And this is also our first

77
00:02:49.425 --> 00:02:51.945
use of an if statement, so

78
00:02:51.945 --> 00:02:53.308
I hope the logic of this makes sense.

79
00:02:53.308 --> 00:02:57.297
Since I equals one and, you know, increment loop.

80
00:02:57.340 --> 00:02:59.900
While repeatedly set V I equals 1

81
00:02:59.900 --> 00:03:01.527
and increment i by 1,

82
00:03:01.527 --> 00:03:02.901
and then when 1 i

83
00:03:02.920 --> 00:03:04.451
gets up to 6, do a

84
00:03:04.451 --> 00:03:05.757
break which breaks here although

85
00:03:05.757 --> 00:03:07.284
the while do and so, the

86
00:03:07.284 --> 00:03:08.596
effective is should be to take

87
00:03:08.596 --> 00:03:09.929
the first five elements of this

88
00:03:09.929 --> 00:03:11.748
vector V and set them to 999.

89
00:03:11.748 --> 00:03:14.832
And yes, indeed, we're taking

90
00:03:14.832 --> 00:03:18.345
V and overwritten the first five elements with 999.

91
00:03:18.345 --> 00:03:20.172
So, this is the

92
00:03:20.172 --> 00:03:21.974
syntax for "if" statements, and

93
00:03:21.974 --> 00:03:25.058
for "while" statement, and notice the end.

94
00:03:25.070 --> 00:03:27.159
We have two ends here.

95
00:03:27.170 --> 00:03:29.719
This ends here ends the if statement

96
00:03:29.730 --> 00:03:33.228
and the second end here ends the while statement.

97
00:03:33.250 --> 00:03:35.265
Now let me show you the more general syntax for

98
00:03:35.265 --> 00:03:37.763
how to use an if-else statement.

99
00:03:37.763 --> 00:03:40.274
So, let's see, V 1

100
00:03:40.274 --> 00:03:42.776
is equal to 999, let's

101
00:03:42.860 --> 00:03:46.996
type V1 equals to 2 for this example.

102
00:03:47.020 --> 00:03:48.758
So, let me type

103
00:03:48.758 --> 00:03:55.050
if V 1 equals 1 display the value as one.

104
00:03:56.855 --> 00:03:58.588
Here's how you write an else

105
00:03:58.588 --> 00:04:00.040
statement, or rather here's an

106
00:04:00.040 --> 00:04:03.853
else if: V 1 equals

107
00:04:03.853 --> 00:04:07.815
2. This is, if in case that's true in our example, display

108
00:04:07.815 --> 00:04:12.268
the value as 2, else

109
00:04:13.650 --> 00:04:17.960
display, the value is not one or two.

110
00:04:17.990 --> 00:04:21.699
Okay, so that's a  if-else

111
00:04:21.700 --> 00:04:23.889
if-else statement it ends.

112
00:04:23.889 --> 00:04:25.271
And of course, here we've just

113
00:04:25.271 --> 00:04:27.589
set v 1 equals 2, so hopefully, yup,

114
00:04:27.610 --> 00:04:30.729
displays that the value is 2.

115
00:04:30.780 --> 00:04:32.844
And finally, I don't

116
00:04:32.880 --> 00:04:34.143
think I talked about this earlier, but

117
00:04:34.143 --> 00:04:35.622
if you ever need to exit Octave,

118
00:04:35.622 --> 00:04:36.947
you can type the exit command and

119
00:04:36.947 --> 00:04:38.373
you hit enter that will cause Octave

120
00:04:38.400 --> 00:04:39.981
to quit or the 'q'--quits

121
00:04:39.981 --> 00:04:42.428
command also works.

122
00:04:42.450 --> 00:04:43.857
Finally, let's talk about

123
00:04:43.857 --> 00:04:45.292
functions and how to define

124
00:04:45.310 --> 00:04:48.592
them and how to use them.

125
00:04:48.620 --> 00:04:49.680
Here's my desktop, and I

126
00:04:49.720 --> 00:04:52.078
have predefined a file

127
00:04:52.078 --> 00:04:56.818
or pre-saved on my desktop a file called "squarethisnumber.m".

128
00:04:56.830 --> 00:04:59.471
This is how you define functions in Octave.

129
00:04:59.480 --> 00:05:01.681
You create a file called, you know,

130
00:05:01.681 --> 00:05:03.958
with your function name and then ending in .m,

131
00:05:03.960 --> 00:05:05.694
and when Octave finds

132
00:05:05.730 --> 00:05:07.643
this file, it knows that this

133
00:05:07.680 --> 00:05:12.322
where it should look for the definition of the function "squarethisnumber.m".

134
00:05:12.340 --> 00:05:14.076
Let's open up this file.

135
00:05:14.076 --> 00:05:15.717
Notice that I'm using the

136
00:05:15.717 --> 00:05:19.352
Microsoft program Wordpad to open up this file.

137
00:05:19.352 --> 00:05:20.250
I just want to encourage you, if

138
00:05:20.250 --> 00:05:23.379
your using Microsoft Windows, to

139
00:05:23.379 --> 00:05:25.075
use Wordpad rather than

140
00:05:25.110 --> 00:05:27.477
Notepad to open up these

141
00:05:27.490 --> 00:05:28.557
files, if you have a

142
00:05:28.557 --> 00:05:29.938
different text editor that's fine

143
00:05:29.938 --> 00:05:33.325
too, but notepad sometimes messes up the spacing.

144
00:05:33.350 --> 00:05:34.775
If you only have Notepad, that should

145
00:05:34.800 --> 00:05:36.312
work too, that could work

146
00:05:36.312 --> 00:05:37.779
too, but if you

147
00:05:37.779 --> 00:05:39.354
have Wordpad as well, I

148
00:05:39.354 --> 00:05:40.609
would rather use that or some

149
00:05:40.610 --> 00:05:45.053
other text editor, if you have a different text editor for editing your functions.

150
00:05:45.060 --> 00:05:47.155
So, here's how you define the function in Octave.

151
00:05:47.155 --> 00:05:49.816
Let me just zoom in a little bit.

152
00:05:49.816 --> 00:05:52.516
And this file has just three lines in it.

153
00:05:52.516 --> 00:05:54.440
The first line says function Y equals square root

154
00:05:54.440 --> 00:05:56.448
number of X, this tells

155
00:05:56.448 --> 00:05:57.705
Octave that I'm gonna return

156
00:05:57.705 --> 00:06:00.025
the value Y, I'm gonna

157
00:06:00.025 --> 00:06:01.315
return one value and that

158
00:06:01.315 --> 00:06:02.375
the value is going to

159
00:06:02.375 --> 00:06:04.443
be saved in the variable Y

160
00:06:04.443 --> 00:06:06.003
and moreover, it tells Octave

161
00:06:06.003 --> 00:06:08.068
that this function has one argument,

162
00:06:08.070 --> 00:06:10.408
which is the argument X,

163
00:06:10.420 --> 00:06:11.846
and the way the function

164
00:06:11.846 --> 00:06:15.156
body is defined, if Y equals X squared.

165
00:06:15.180 --> 00:06:16.553
So, let's try to call

166
00:06:16.553 --> 00:06:19.071
this function "square", this number

167
00:06:19.071 --> 00:06:21.854
5, and this actually

168
00:06:21.854 --> 00:06:23.115
isn't going to work, and

169
00:06:23.115 --> 00:06:25.693
Octave says square this number it's undefined.

170
00:06:25.693 --> 00:06:28.902
That's because Octave doesn't know where to find this file.

171
00:06:28.902 --> 00:06:30.682
So as usual, let's use PWD,

172
00:06:30.690 --> 00:06:32.592
or not in my directory,

173
00:06:32.592 --> 00:06:36.151
so let's see this c:\users\ang\desktop.

174
00:06:36.151 --> 00:06:39.888
That's where my desktop is.

175
00:06:39.888 --> 00:06:41.276
Oops, a little typo there.

176
00:06:41.276 --> 00:06:42.848
Users ANG desktop

177
00:06:42.848 --> 00:06:44.157
and if I now type square

178
00:06:44.157 --> 00:06:46.728
root number 5, it returns the

179
00:06:46.728 --> 00:06:48.505
answer 25.

180
00:06:48.505 --> 00:06:50.347
As kind of an advanced feature, this

181
00:06:50.347 --> 00:06:51.972
is only for those of you

182
00:06:51.972 --> 00:06:54.596
that know what the term search path means.

183
00:06:54.596 --> 00:06:55.945
But so if you

184
00:06:55.945 --> 00:06:57.497
want to modify the Octave

185
00:06:57.497 --> 00:06:58.863
search path and you

186
00:06:58.863 --> 00:06:59.866
could, you just think of

187
00:06:59.866 --> 00:07:01.827
this next part as advanced

188
00:07:01.827 --> 00:07:03.292
or optional material.

189
00:07:03.292 --> 00:07:04.214
Only for those who are either

190
00:07:04.214 --> 00:07:05.484
familiar with the concepts of

191
00:07:05.484 --> 00:07:07.642
search paths and permit languages,

192
00:07:07.650 --> 00:07:08.962
but you can use the

193
00:07:08.962 --> 00:07:11.875
term addpath, safety colon,

194
00:07:11.880 --> 00:07:16.241
slash users/ANG/desktop to

195
00:07:16.241 --> 00:07:17.972
add that directory to the

196
00:07:17.972 --> 00:07:19.744
Octave search path so that

197
00:07:19.744 --> 00:07:21.065
even if you know, go to

198
00:07:21.065 --> 00:07:22.611
some other directory I can

199
00:07:22.611 --> 00:07:24.510
still, Octave still knows

200
00:07:24.510 --> 00:07:26.005
to look in the users ANG

201
00:07:26.005 --> 00:07:29.214
desktop directory for functions

202
00:07:29.214 --> 00:07:30.521
so that even though I'm in

203
00:07:30.521 --> 00:07:31.868
a different directory now, it still

204
00:07:31.868 --> 00:07:35.297
knows where to find the square this number function.

205
00:07:35.297 --> 00:07:35.935
Okay?

206
00:07:35.935 --> 00:07:37.407
But if you're not familiar

207
00:07:37.407 --> 00:07:39.184
with the concept of search path, don't worry

208
00:07:39.184 --> 00:07:40.068
about it.

209
00:07:40.068 --> 00:07:40.889
Just make sure as you use

210
00:07:40.889 --> 00:07:42.053
the CD command to go to

211
00:07:42.053 --> 00:07:43.926
the directory of your function before

212
00:07:43.940 --> 00:07:47.441
you run it and that actually works just fine.

213
00:07:47.441 --> 00:07:49.587
One concept that Octave has

214
00:07:49.600 --> 00:07:51.058
that many other programming

215
00:07:51.058 --> 00:07:52.969
languages don't is that it

216
00:07:52.969 --> 00:07:54.909
can also let you define

217
00:07:54.909 --> 00:07:58.873
functions that return multiple values or multiple arguments.

218
00:07:58.873 --> 00:08:00.889
So here's an example of that.

219
00:08:00.889 --> 00:08:02.931
Define the function called square

220
00:08:02.931 --> 00:08:04.964
and cube this number X

221
00:08:04.964 --> 00:08:06.644
and what this says is this

222
00:08:06.660 --> 00:08:08.547
function returns 2 values, y1 and y2.

223
00:08:08.547 --> 00:08:09.955
When I set down, this

224
00:08:09.960 --> 00:08:13.603
follows, y1 is squared, y2 is execute.

225
00:08:13.603 --> 00:08:16.972
And what this does is this really returns 2 numbers.

226
00:08:16.980 --> 00:08:18.855
So, some of you depending

227
00:08:18.855 --> 00:08:20.195
on what programming language you use,

228
00:08:20.195 --> 00:08:22.931
if you're familiar with, you know, CC++ your offer.

229
00:08:22.940 --> 00:08:26.051
Often, we think of the function as return in just one value.

230
00:08:26.051 --> 00:08:27.847
But just so the syntax in Octave

231
00:08:27.847 --> 00:08:31.679
that should return multiple values.

232
00:08:32.430 --> 00:08:34.087
Now back in the Octave window. If

233
00:08:34.087 --> 00:08:37.914
I type, you know, a, b equals

234
00:08:37.914 --> 00:08:41.263
square and cube this

235
00:08:41.263 --> 00:08:44.599
number 5 then

236
00:08:44.610 --> 00:08:46.338
a is now equal to

237
00:08:46.338 --> 00:08:47.778
25 and b is equal to

238
00:08:47.778 --> 00:08:49.729
the cube of 5 equal to 125.

239
00:08:49.729 --> 00:08:51.645
So, this is often

240
00:08:51.670 --> 00:08:53.010
convenient if you needed to define

241
00:08:53.010 --> 00:08:56.447
a function that returns multiple values.

242
00:08:56.447 --> 00:08:57.480
Finally, I'm going to show

243
00:08:57.480 --> 00:09:01.123
you just one more sophisticated example of a function.

244
00:09:01.130 --> 00:09:02.361
Let's say I have a data set

245
00:09:02.370 --> 00:09:04.400
that looks like this, with data points at 1, 1, 2, 2, 3, 3.

246
00:09:04.430 --> 00:09:07.636
And what I'd like

247
00:09:07.636 --> 00:09:09.113
to do is to define an

248
00:09:09.113 --> 00:09:10.798
octave function to compute the cost

249
00:09:10.830 --> 00:09:14.341
function J of theta for different values of theta.

250
00:09:14.360 --> 00:09:16.157
First let's put the data into octave.

251
00:09:16.160 --> 00:09:17.694
So I set my design

252
00:09:17.700 --> 00:09:20.998
matrix to be 1,1,1,2,1,3.

253
00:09:21.010 --> 00:09:24.043
So, this is my design

254
00:09:24.050 --> 00:09:26.073
matrix x with x0, the

255
00:09:26.073 --> 00:09:27.428
first column being the said

256
00:09:27.428 --> 00:09:28.746
term and the second term being

257
00:09:28.770 --> 00:09:32.375
you know, my the x-values of my three training examples.

258
00:09:32.375 --> 00:09:33.594
And let me set

259
00:09:33.594 --> 00:09:35.488
y to be 1-2-3 as

260
00:09:35.488 --> 00:09:38.793
follows, which were the y axis values.

261
00:09:38.810 --> 00:09:40.431
So let's say theta

262
00:09:40.431 --> 00:09:43.714
is equal to 0 semicolon 1.

263
00:09:43.730 --> 00:09:45.652
Here at my desktop, I've

264
00:09:45.660 --> 00:09:47.483
predefined does cost function

265
00:09:47.490 --> 00:09:49.008
j and if I

266
00:09:49.010 --> 00:09:52.019
bring up the definition of that function it looks as follows.

267
00:09:52.019 --> 00:09:53.579
So function j equals cost function

268
00:09:53.580 --> 00:09:55.192
j equals x y

269
00:09:55.192 --> 00:09:57.151
theta, some commons, specifying

270
00:09:57.151 --> 00:09:59.546
the inputs and then

271
00:09:59.560 --> 00:10:01.383
vary few steps set m

272
00:10:01.383 --> 00:10:02.995
to be the number trading examples

273
00:10:03.020 --> 00:10:05.495
thus the number of rows in x.

274
00:10:05.510 --> 00:10:07.596
Compute the predictions, predictions equals

275
00:10:07.596 --> 00:10:10.137
x times theta and so

276
00:10:10.170 --> 00:10:11.670
this is a common that's wrapped

277
00:10:11.710 --> 00:10:14.693
around, so this is probably the preceding comment line.

278
00:10:14.720 --> 00:10:16.823
Computer script errors by, you know, taking

279
00:10:16.823 --> 00:10:18.637
the difference between your predictions and

280
00:10:18.640 --> 00:10:20.265
the y values and taking the

281
00:10:20.265 --> 00:10:22.126
element of y squaring and then

282
00:10:22.140 --> 00:10:24.376
finally computing the cost

283
00:10:24.376 --> 00:10:26.128
function J. And Octave knows

284
00:10:26.128 --> 00:10:27.439
that J is a value I

285
00:10:27.439 --> 00:10:31.383
want to return because J appeared here in the function definition.

286
00:10:31.420 --> 00:10:34.127
Feel free by the way to pause

287
00:10:34.170 --> 00:10:35.292
this video if you want

288
00:10:35.292 --> 00:10:36.712
to look at this function

289
00:10:36.712 --> 00:10:38.820
definition for longer and

290
00:10:38.820 --> 00:10:44.031
kind of make sure that you understand the different steps.

291
00:10:44.031 --> 00:10:45.184
But when I run it in

292
00:10:45.184 --> 00:10:46.630
Octave, I run j equals

293
00:10:46.630 --> 00:10:51.197
cost function j x y theta.

294
00:10:51.197 --> 00:10:55.142
It computes. Oops, made a typo there.

295
00:10:55.142 --> 00:10:57.018
It should have been capital X. It

296
00:10:57.018 --> 00:11:00.472
computes J equals 0 because

297
00:11:00.510 --> 00:11:03.367
if my data set was,

298
00:11:03.367 --> 00:11:06.963
you know, 123, 123 then setting, theta 0

299
00:11:06.980 --> 00:11:08.741
equals 0, theta 1 equals

300
00:11:08.770 --> 00:11:11.259
1, this gives me exactly the

301
00:11:11.259 --> 00:11:15.559
45-degree line that fits my data set perfectly.

302
00:11:15.600 --> 00:11:16.887
Whereas in contrast if I set

303
00:11:16.887 --> 00:11:19.828
theta equals say 0, 0,

304
00:11:19.830 --> 00:11:22.524
then this hypothesis is

305
00:11:22.540 --> 00:11:24.050
predicting zeroes on everything

306
00:11:24.050 --> 00:11:25.803
the same, theta 0 equals 0,

307
00:11:25.810 --> 00:11:27.139
theta 1 equals 0 and

308
00:11:27.139 --> 00:11:29.345
I compute the cost function

309
00:11:29.370 --> 00:11:31.830
then it's 2.333 and that's

310
00:11:31.830 --> 00:11:35.495
actually equal to 1 squared,

311
00:11:35.520 --> 00:11:36.745
which is my squared error on

312
00:11:36.745 --> 00:11:39.789
the first example, plus 2 squared,

313
00:11:39.800 --> 00:11:42.377
plus 3 squared and then

314
00:11:42.440 --> 00:11:45.288
divided by 2m, which is

315
00:11:45.288 --> 00:11:47.091
2 times number of training examples,

316
00:11:47.091 --> 00:11:50.643
which is indeed 2.33 and

317
00:11:50.643 --> 00:11:53.289
so, that sanity checks that

318
00:11:53.330 --> 00:11:54.909
this function here is, you

319
00:11:54.909 --> 00:11:56.302
know, computing the correct cost

320
00:11:56.302 --> 00:11:58.212
function and these are the couple examples

321
00:11:58.250 --> 00:12:00.222
we tried out on our

322
00:12:00.222 --> 00:12:03.433
simple training example.

323
00:12:03.490 --> 00:12:04.914
And so that sanity tracks

324
00:12:04.960 --> 00:12:08.689
that the cost function J,

325
00:12:08.720 --> 00:12:10.202
as defined here, that it

326
00:12:10.230 --> 00:12:12.992
is indeed, you know, seeming to compute

327
00:12:12.992 --> 00:12:14.908
the correct cost function, at least

328
00:12:14.920 --> 00:12:17.424
on our simple training set

329
00:12:17.430 --> 00:12:18.835
that we had here with X

330
00:12:18.835 --> 00:12:20.823
and Y being this

331
00:12:20.823 --> 00:12:25.189
simple training example that we solved.

332
00:12:25.230 --> 00:12:26.285
So, now you know how

333
00:12:26.285 --> 00:12:28.171
to right control statements like for loops,

334
00:12:28.171 --> 00:12:29.838
while loops and if statements

335
00:12:29.838 --> 00:12:33.197
in octave as well as how to define and use functions.

336
00:12:33.197 --> 00:12:34.530
In the next video, I'm

337
00:12:34.530 --> 00:12:36.123
going to just very quickly

338
00:12:36.123 --> 00:12:38.144
step you through the logistics

339
00:12:38.144 --> 00:12:39.873
of working on and

340
00:12:39.873 --> 00:12:41.664
submitting problem sets for

341
00:12:41.664 --> 00:12:45.212
this class and how to use our submission system.

342
00:12:45.230 --> 00:12:46.794
And finally, after that, in

343
00:12:46.794 --> 00:12:48.856
the final octave tutorial video,

344
00:12:48.856 --> 00:12:51.400
I wanna tell you about vectorization, which

345
00:12:51.400 --> 00:12:52.938
is an idea for how to

346
00:12:52.938 --> 00:12:56.126
make your octave programs run much fast.